#include <queue>
class Solution {
public:
    class mycomparison{
        public:
        bool operator()(const pair<int,int>& left,const pair<int,int>& right )
        {
            return left.second>right.second;
        }
    };
    vector<int> topKFrequent(vector<int>& nums, int k) {
      unordered_map<int,int> map;
      for(int i=0;i<nums.size();i++)
      {
          map[nums[i]]++;
      }  
      priority_queue<pair<int,int>,vector<pair<int,int>>,mycomparison> pque;
      for(unordered_map<int,int>::iterator it = map.begin();it!=map.end();it++)
        {
            pque.push(*it);
            if(pque.size()>k)
            {
                pque.pop();
            }
        }
        vector<int> ans(k);
        for(int i=k-1;i>=0;i--)
        {
            ans[i]=pque.top().first;
            pque.pop();
        }
        return ans;
    }
};
