//错误版本，碰巧观察到规律，以为中序遍历就是对称的遍历方法，通过反转遍历出的数组与原数组比较判断是否对称是错误的，原因是忽略了二叉树形状不对称的情况
class Solution {
public:
    vector<int> num;
    bool isSymmetric(TreeNode* root) {
        if (root)
        inorder(root);
        vector<int> num2(num);
        reverse(num.begin(),num.end());
        if(num==num2)
        return true;
        else
        return false;
    }
    TreeNode* inorder(TreeNode* p)
    {
        if(p->left)
        inorder(p->left);
        num.push_back(p->val);
        if(p->right)
        inorder(p->right);
        return p;
    }
};
//递归版本
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        return symmetric(root->left,root->right);
    }
    bool symmetric(TreeNode* leftN,TreeNode* rightN)
    {
        if(leftN&&!rightN)
        return false;
        else if(!leftN&&rightN)
        return false;
        else if(!leftN&&!rightN)
        return true;
        else if(leftN->val!=rightN->val)
        return false;
        else
        {
            return (symmetric(leftN->right,rightN->left)&&symmetric(leftN->left,rightN->right));
        }
    }
};
//迭代版本（队列实现）
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        queue<TreeNode*> que;
        if(root)
        {
            que.push(root->left);
            que.push(root->right);
        }
        while(!que.empty())
        {
            TreeNode* l = que.front();
            que.pop();
            TreeNode* r = que.front();
            que.pop();
            if(l&&!r)
            return false;
            else if(!l&&r)
            return false;
            else if(!l&&!r)
            continue;
            else if(l->val!=r->val)
            return false;
            que.push(r->left);
            que.push(l->right);
            que.push(r->right);
            que.push(l->left);
        }
        return true;
    }
};
