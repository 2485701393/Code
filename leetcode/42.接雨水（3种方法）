//简单的通过双层循环实现，超时力T_T
class Solution {
public:
    int trap(vector<int>& height) {
        int ans = 0;
        for(int i=0;i<height.size();i++)
        {
            if(i==0||i==height.size()-1)
            continue;
            int left = height[i];
            int right = height[i];
            for(int j = i+1;j<height.size();j++)
            {
                if(height[j]>right)
                right = height[j];
            }
            for(int j = i-1;j>=0;j--)
            {
                if(height[j]>left)
                left = height[j];
            }
            int min = right>left?left:right;
            if(min-height[i]>0)
            ans+=min-height[i];
        }
        return ans;
    }
};
//用动态规划？
class Solution {
public:
    int trap(vector<int>& height) {
        if(height.size()==2)
        return 0;
        vector<int> left(height.size(),0);
        vector<int> right(height.size(),0);
        int len = height.size();
        left[0]=height[0];
        for(auto i = 1;i<len;i++)
        {
            left[i]=height[i]>left[i-1]?height[i]:left[i-1];
        }
        right[len-1]=height[len-1];
        for(int i=len-2;i>=0;i--)
        {
            right[i]=height[i]>right[i+1]?height[i]:right[i+1];
        }
        int ans = 0;
        for(int i = 1 ;i <= len-2 ;i++)
        {
            int col = min(left[i],right[i])-height[i];
            if(col >= 0 )
            {
                ans+=col;
            }
        }
        return ans;
    }
};
//按行数，单调栈
class Solution {
public:
    int trap(vector<int>& height) {
        stack<int> s;
        s.push(0);
        int ans = 0;
        for(int i = 1 ;i <height.size();i++)
        {
            while(!s.empty()&&height[i]>height[s.top()])
            {
                int mid = s.top();
                s.pop();
                if(!s.empty())
                {
                    int h = min(height[s.top()],height[i])-height[mid];
                    int w = i - s.top() - 1;
                    ans += h*w;
                }
                            }
            s.push(i);                
        }
        return ans;
    }
};
